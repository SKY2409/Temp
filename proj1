@page "/export"
@inject BlazorOracleExport.Data.MyDataDao Dao
@inject BlazorOracleExport.Services.ExcelService ExcelService

<h3>Export Data to Excel</h3>

<div class="form-group">
    <label>Number ID:</label>
    <input type="number" class="form-control" @bind="numberId" />
</div>

<div class="form-group mt-2">
    <label>Month and Year:</label>
    <input type="month" class="form-control" @bind="monthYearString" />
</div>

<button class="btn btn-primary mt-3" @onclick="ExportToExcel">Export</button>

@if (downloadLink != null)
{
    <p><a href="@downloadLink" download="Export.xlsx">Download Excel File</a></p>
}

@code {
    private int numberId;
    private string monthYearString = DateTime.Now.ToString("yyyy-MM"); // Default to current month

    private string? downloadLink;

    private async Task ExportToExcel()
    {
        // You can parse the date here if needed:
        var selectedDate = DateTime.ParseExact(monthYearString + "-01", "yyyy-MM-dd", null);

        var data = await Dao.GetDataAsync(); // You can pass numberId and selectedDate to this later
        var excelBytes = ExcelService.GenerateExcel(data);
        downloadLink = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{Convert.ToBase64String(excelBytes)}";
    }
}


@page "/export"
@inject BlazorOracleExport.Data.MyDataDao Dao
@inject BlazorOracleExport.Services.ExcelService ExcelService

<h3>Export Data to Excel</h3>

<!-- Preview Selected IDs -->
@if (selectedIds.Count > 0)
{
    <div class="alert alert-info">
        <strong>Selected IDs:</strong> @string.Join(", ", selectedIds)
    </div>
}

<!-- Inputs Row -->
<div class="d-flex flex-wrap gap-3 mb-3 align-items-end">
    <!-- Multi-select Dropdown -->
    <div>
        <label class="form-label">Number IDs:</label>
        <div class="dropdown">
            <button class="btn btn-outline-primary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                Select IDs
            </button>
            <ul class="dropdown-menu p-2" style="min-width: 200px;">
                @foreach (var id in availableIds)
                {
                    <li>
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" @bind="idSelections[id]" />
                            <label class="form-check-label">@id</label>
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>

    <!-- Month-Year Calendar Picker -->
    <div>
        <label class="form-label">Select Month:</label>
        <InputDate @bind-Value="selectedDate" class="form-control" />
    </div>
</div>

<!-- Export Button -->
<button class="btn btn-success" @onclick="ExportToExcel">Export</button>

<!-- Download Link -->
@if (downloadLink != null)
{
    <p class="mt-3"><a href="@downloadLink" download="Export.xlsx">Download Excel File</a></p>
}

@code {
    private Dictionary<int, bool> idSelections = new();
    private List<int> availableIds = new() { 101, 102, 103, 104 }; // Example IDs
    private List<int> selectedIds = new();
    private DateTime selectedDate = DateTime.Today;
    private string? downloadLink;

    private async Task ExportToExcel()
    {
        selectedIds = idSelections.Where(x => x.Value).Select(x => x.Key).ToList();

        // Pass selectedIds and selectedDate to your DAO in the future
        var data = await Dao.GetDataAsync(); 
        var excelBytes = ExcelService.GenerateExcel(data);
        downloadLink = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{Convert.ToBase64String(excelBytes)}";
    }
}
