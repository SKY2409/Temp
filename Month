<div class="month-picker">
    <div class="header">
        <button @onclick="PreviousYear">‹</button>
        <span class="year">@CurrentYear</span>
        <button @onclick="NextYear">›</button>
    </div>

    <div class="months-grid">
        @foreach (var month in Enumerable.Range(1, 12))
        {
            <button class="month-btn @(IsSelected(month) ? "selected" : "")"
                    @onclick="() => SelectMonth(month)">
                @MonthName(month)
            </button>
        }
    </div>
</div>

@code {
    [Parameter] public int SelectedMonth { get; set; } = DateTime.Now.Month;
    [Parameter] public int SelectedYear { get; set; } = DateTime.Now.Year;
    [Parameter] public EventCallback<(int Month, int Year)> OnMonthSelected { get; set; }

    private int CurrentYear { get; set; }

    protected override void OnInitialized()
    {
        CurrentYear = SelectedYear;
    }

    private void PreviousYear() => CurrentYear--;
    private void NextYear() => CurrentYear++;

    private void SelectMonth(int month)
    {
        SelectedMonth = month;
        SelectedYear = CurrentYear;
        OnMonthSelected.InvokeAsync((SelectedMonth, SelectedYear));
    }

    private string MonthName(int month) => CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[month - 1];

    private bool IsSelected(int month) => month == SelectedMonth && CurrentYear == SelectedYear;
}




.month-picker {
    width: 200px;
    text-align: center;
    font-family: sans-serif;
}

.header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-weight: bold;
    margin-bottom: 10px;
}

.months-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 8px;
}

.month-btn {
    padding: 8px;
    border: none;
    background: transparent;
    cursor: pointer;
    border-radius: 6px;
    font-size: 14px;
    transition: background 0.2s;
}

.month-btn:hover {
    background-color: #eeeeee33;
}

.month-btn.selected {
    background: linear-gradient(to bottom, #006eff, #004fcf);
    color: white;
}



<MonthPicker SelectedMonth="selectedMonth"
             SelectedYear="selectedYear"
             OnMonthSelected="HandleMonthSelected" />

<p>Selected: @selectedMonth/@selectedYear</p>

@code {
    private int selectedMonth = 5;
    private int selectedYear = 2020;

    private void HandleMonthSelected((int Month, int Year) selection)
    {
        selectedMonth = selection.Month;
        selectedYear = selection.Year;
    }
}















<select @bind="SelectedMonth" class="form-select" @onchange="EmitSelection">
    @foreach (var month in Enumerable.Range(1, DateTime.Now.Month))
    {
        <option value="@month">@MonthName(month)</option>
    }
</select>

@* Optional Year dropdown (if needed) *@
<select disabled class="form-select mt-2">
    <option>@CurrentYear</option>
</select>

@code {
    [Parameter] public int SelectedMonth { get; set; } = DateTime.Now.Month;
    [Parameter] public EventCallback<int> SelectedMonthChanged { get; set; }

    private int CurrentYear = DateTime.Now.Year;

    private async Task EmitSelection(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var month))
        {
            SelectedMonth = month;
            await SelectedMonthChanged.InvokeAsync(month);
        }
    }

    private string MonthName(int month)
    {
        return CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedMonthNames[month - 1];
    }
}





<MonthPickerDropdown @bind-SelectedMonth="selectedMonth" />

<p>You selected: @CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(selectedMonth)</p>

@code {
    private int selectedMonth = DateTime.Now.Month;
}






.form-select {
    width: 200px;
    padding: 8px;
    border-radius: 6px;
}


























<div class="month-picker">
    <div class="month-picker-header">
        <button @onclick="PreviousYear">«</button>
        <span>@DisplayYear</span>
        <button @onclick="NextYear">»</button>
    </div>

    <div class="month-grid">
        @foreach (var month in MonthList)
        {
            <button class="@GetMonthClass(month)" @onclick="() => SelectMonth(month)">
                @month.ToString("MMM")
            </button>
        }
    </div>
</div>

@code {
    [Parameter]
    public DateTime SelectedMonth { get; set; } = DateTime.Now;

    [Parameter]
    public EventCallback<DateTime> SelectedMonthChanged { get; set; }

    private int DisplayYear { get; set; }
    private List<DateTime> MonthList { get; set; } = new();

    protected override void OnInitialized()
    {
        DisplayYear = SelectedMonth.Year;
        BuildMonthGrid();
    }

    private void BuildMonthGrid()
    {
        MonthList = Enumerable.Range(1, 12)
            .Select(m => new DateTime(DisplayYear, m, 1))
            .ToList();
    }

    private void PreviousYear()
    {
        DisplayYear--;
        BuildMonthGrid();
    }

    private void NextYear()
    {
        DisplayYear++;
        BuildMonthGrid();
    }

    private async Task SelectMonth(DateTime month)
    {
        SelectedMonth = month;
        await SelectedMonthChanged.InvokeAsync(month);
    }

    private string GetMonthClass(DateTime month)
    {
        return month.Month == SelectedMonth.Month && month.Year == SelectedMonth.Year
            ? "month-button selected"
            : "month-button";
    }
}




----------------

.month-picker {
    max-width: 400px;
    margin: 1rem auto;
    background: #1e1e2f;
    color: white;
    padding: 1rem;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0,0,0,0.3);
}

.month-picker-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 1.2rem;
}

.month-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 10px;
}

.month-button {
    padding: 10px;
    background: transparent;
    border: 1px solid #3b82f6;
    color: white;
    border-radius: 6px;
    cursor: pointer;
}

.month-button.selected {
    background: #3b82f6;
    color: white;
}

